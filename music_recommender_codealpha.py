# -*- coding: utf-8 -*-
"""Music recommender_codealpha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZ9IyUVeC41v8-Ig-D90w24D46xbT1f9
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/data (2).csv')
data

data.shape

data.info()

data.isnull().sum()

data.head(10)

data['genres'].unique().shape

data.describe()

data.columns

#To find corelation between the data
#used heatmap
plt.figure(figsize=(35,15))
correlation_matrix = data[['mode', 'acousticness', 'danceability', 'duration_ms',
       'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness',
       'tempo', 'valence', 'popularity', 'key']].corr()
sns.heatmap(correlation_matrix,vmax=1,square=True,annot=True,cmap='viridis')
plt.show()

from yellowbrick.target import FeatureCorrelation

feature_names = ['mode', 'acousticness', 'danceability', 'duration_ms',
       'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness',
       'tempo', 'valence', 'key']

X, y = data[feature_names], data['popularity']

# Create a list of the feature names
features = np.array(feature_names)

# Instantiate the visualizer
visualizer = FeatureCorrelation(labels=features)

plt.rcParams['figure.figsize']=(20,20)
visualizer.fit(X, y)     # Fit the data to the visualizer
visualizer.show()

import plotly.express as px

top10_genres = data.nlargest(10, 'popularity')

fig = px.bar(top10_genres, x='genres', y=['valence', 'energy', 'danceability', 'acousticness'], barmode='group')
fig.show()


from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler


# Normalize numerical columns
scaler = MinMaxScaler()
numerical_cols = ['acousticness', 'danceability', 'duration_ms', 'energy', 'instrumentalness', 'liveness',
                  'loudness', 'speechiness', 'tempo', 'valence', 'popularity']
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])


# Example: Recommend songs similar to a given song
song_to_compare = data[data['mode'] == 1].iloc[0]  # Choosing a song (mode 1)


# Compute similarity based on selected features
data['similarity'] = data[numerical_cols].apply(lambda x: cosine_similarity([song_to_compare[numerical_cols]], [x])[0][0], axis=1)


# Recommend top 15 similar songs
top_recommendations = data[data['mode'] == 1].nlargest(15, 'similarity')
print(top_recommendations[['genres', 'similarity']])